name: Create webservers infrastrucutre via Terraform
on:
  workflow_dispatch:

  pull_request:
    paths:
    - "terraform/**"
    - ".github/workflows/terraform-infra-set-up.yaml"

env:
  TERRAFORM_CODE_DIR: "terraform"
  TERRAFORM_PLAN_NAME: "webservers.tfplan"
  ##? https://developer.hashicorp.com/terraform/cli/config/environment-variables
  TF_PLUGIN_CACHE_DIR: "${{ github.workspace }}/.terraform-plugin-cache"
  TF_IN_AUTOMATION: true
  TF_INPUT: false

concurrency:
  group: terraform-webservers

jobs:
  codeScanning:
    name: IaC Scanning with tfsec Stage
    runs-on: ubuntu-latest
    steps:
      - name: checkout the repository
        uses: actions/checkout@v3

      - name: tfsec pull request commentor if found vulnerabilities
        if: ${{ github.event_name == 'pull_request' }}
        uses: aquasecurity/tfsec-pr-commenter-action@v1.3.1
        id: tfsec-pr-commenter
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          working_directory: "${{ github.workspace }}/${{ env.TERRAFORM_CODE_DIR }}"

      - name: IaC Security Scanning with tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        id: tfsec
        with:
          working_directory: "${{ github.workspace }}/${{ env.TERRAFORM_CODE_DIR }}"

  deploymentPLan:
    name: Terraform webservers deployment Plan Stage
    runs-on: ubuntu-latest
    needs: codeScanning
    outputs:
      exitCode: ${{ steps.plan.outputs.exitcode }}

    steps:
      - name: checkout the repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ vars.TERRAFORM_VERSION }}

      - uses: actions/cache@v3
        name: "Terraform cache"
        id: cache
        with:
          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
          key: ${{ runner.os }}-${{ env.TERRAFORM_CODE_DIR }}-${{ hashFiles(format('{0}/{1}', env.TERRAFORM_CODE_DIR , '/providers.tf')) }}

      - if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        name: Create TF_PLUGIN_CACHE_DIR
        shell: bash
        run: mkdir -p ${{ env.TF_PLUGIN_CACHE_DIR }}

      - name: Terraform init and plan
        shell: bash
        id: plan
        working-directory: "${{ github.workspace }}/${{ env.TERRAFORM_CODE_DIR }}"
        run: |
          terraform init
          terraform validate
          terraform plan -out "${{ env.TERRAFORM_PLAN_NAME }}" -detailed-exitcode
        env:
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: "${{ env.TERRAFORM_PLAN_NAME }}"
          path: "${{ github.workspace }}/${{ env.TERRAFORM_CODE_DIR }}/${{ env.TERRAFORM_PLAN_NAME }}"

  deploymentApply:
    if: ${{ !cancelled() && !failure() && needs.deploymentPLan.outputs.exitCode == 2 }}
    name: Terraform webservers deployment Apply Stage
    runs-on: ubuntu-latest
    needs: deploymentPLan
    steps:
      - name: checkout the repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ vars.TERRAFORM_VERSION }}

      - uses: actions/download-artifact@v3
        with:
          name: "${{ env.TERRAFORM_PLAN_NAME }}"
          path: "${{ github.workspace }}/${{ env.TERRAFORM_CODE_DIR }}"

      - uses: actions/cache@v3
        name: "Terraform cache"
        id: cache
        with:
          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
          key: ${{ runner.os }}-${{ env.TERRAFORM_CODE_DIR }}-${{ hashFiles(format('{0}/{1}', env.TERRAFORM_CODE_DIR , '/providers.tf')) }}

      - name: "Terraform Apply"
        shell: bash
        working-directory: "${{ github.workspace }}/${{ env.TERRAFORM_CODE_DIR }}"
        run: |
          terraform init
          terraform apply "${{ env.TERRAFORM_PLAN_NAME }}"
        env:
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}
